# -*- coding: utf-8 -*-
"""Recommendation Systems HW (Main 1)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I1twFSDygLGlS_7frWgMoN1GcWmOz2HX
"""

import pandas as pd
import numpy as np
import json
from datetime import datetime

data = []
with open('/content/Beauty.json') as f:
  for line in f:
    data.append(json.loads(line))

data

df = pd.json_normalize(data)

df

df['date']

df['date'] = pd.to_datetime(df['date'], unit = 'ms')

df['unixReviewTime'] = pd.to_datetime(df['unixReviewTime'], unit = 's')

df

overall_ratings = df[['asin','date', 'reviewerID', 'overall']]
overall_ratings

#overall_agg = overall_ratings.groupby('asin').agg(mean_overall = ('overall', 'mean'), count_overall = ('overall', 'count'))
#overall_agg

#overall_agg.sort_values('count_overall', ascending = False, inplace = True)
#overall_agg

popular_products = overall_ratings.groupby('asin').agg({'overall': [np.size, np.sum, np.mean]})
popular_products.sort_values(('overall', 'sum'), ascending = False, inplace = True)
popular_products

def recommend_5_pop(user, popular_info, user_info):

  # Obtain the items that were already purchased by the user
  purchased = user_info.loc[user_info['reviewerID'] == user, 'asin']

  # Obtain the popular items, excluding ones already purchased by the user
  recs = popular_info.drop(index = purchased)

  # Give the five products
  recs_5 = recs.index[:5]

  return recs_5

recommend_5_pop('A3CIUOJXQ5VDQ2', popular_products, overall_ratings)

#overall_ratings_by_user = overall_ratings.groupby('reviewerID').agg(mean_overall = ('overall', 'mean'), count_overall = ('overall', 'count'))
#overall_ratings_by_user

"""# **2. Write a function that recommends 5 beauty products for each user based on next items purchased by other users.**"""

next_purchases = overall_ratings.sort_values(['reviewerID', 'date'])
next_purchases

next_purchases['next_purchase'] = next_purchases.groupby('reviewerID')['asin'].shift(-1)

next_purchases

list(next_purchases.loc[next_purchases['reviewerID'] == 'A105A034ZG9EHO', 'asin'])

list(next_purchases[next_purchases['reviewerID'] == 'A105A034ZG9EHO']['asin'])

prev_item = list(next_purchases[next_purchases['reviewerID'] == 'A105A034ZG9EHO']['asin'])[-1]

list(next_purchases.loc[next_purchases['asin'] == prev_item, 'next_purchase'].value_counts().index)

next_purchases.loc[next_purchases['asin'] == 'B0012Y0ZG2']

# Function that recommends 5 beauty products for each user based on next items purchased by other users

def recommend_5_next(df, user):
  # last purchase made
  last_pur = list(df[df['reviewerID'] == user]['asin'])[-1]

  # items that were already purchased
  already_pur = list(df.loc[df['reviewerID'] == user, 'asin'])

  # list of next items
  next_items = list(df.loc[df['asin'] == last_pur, 'next_purchase'].value_counts().index)

  # exclude items that were already purchased
  actual = [item for item in next_items if item not in already_pur]

  # recommend the five products
  actual5 = actual[:5]

  return actual5

recommend_5_next(next_purchases, 'AZRD4IZU6TBFV')

# Group by the reviewerID shift(-1)
# Remember, for the last item of each group, when you shift(-1), the corresponding shifted value is filled with null, which makes sense since there's no next item after the last item